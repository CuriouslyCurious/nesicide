This is the list of changes per version for NESICIDE application.

V1.014
Bugfix in MMC1 mapper thanks to ThreeGen on #nesdev.
Graphics Banks are now created from two separate listviews, one for the "left side" and one for the "right side".

V1.013
Tile Editor supports tiles from 8x8 up to 256x256 or Screens which are a 256x240 Tile.

V1.012
Improvements to Tile Editor, such as: hollow/filled circle tool; improved select/drag tool with resizeable drag edges;
usage of clipboard for cut/copy/paste [Ctrl+X/Ctrl+C/Ctrl+V] to or from other programs.  Support for undo/redo is also
included but there are a few minor quirks I'm still trying to work out.

V1.011
Added Tile Editor that can be used to create tiles of sizes from 8x8, 8x16, up to 128x128.  Tile Editor includes
many common "paint program" tools like: pencil tool, line tool, hollow/filled box tools, paint bucket tool,
selection-drag/copy/erase tool, rotate clockwise/counterclockwise tools, and flip horizontal/vertical tools.  Tiles
that are big enough to contain multiple attribute-block segments (ie bigger than 16x16) will adjust the attributes
of any conflicting pixels whenever necessary.  The full 16-color attribute table is available to paint with.  The
only tool that behaves a bit differently in the "conflict resolution" is the selection-drag/copy/erase tool.  Since
it is possible to select an arbitrary portion of the image it is thus *impossible* to resolve attribute conflicts from
moving this arbitrary chunk around the rest of the image.  Attributes can be fixed with the familiar "paint attributes"
tool.  Created tiles can be added to Graphics Banks items to be used in ROMs.  Also, any created tiles, including any
loaded binary files (PNGs) can be used to paint any portion of any other tile by selecting the tile from the tile list
and drawing with it.  I think I might rework how the tile-drawing works to make it tool-dependent, but for right now
the tile-drawing just lets you paint any-size rectangles of the tile at 8x8-pixel grid resolution.

V1.010
Added source file and line information of declaration location of symbol to symbol tooltips in Code Editor.
Added 'equate' relations to tooltips in Code Editor.
Added symbol segment name display to Symbol Watch.
"Go to Definition" menu option now available in Code Editor context menu if a symbol is under the pointer.

V1.009
If a CHR file is .incbin'd into the source it'll show up in the Source Navigator toolbar; selecting it now opens it in a
CHR viewer.
"Go to Definition" menu option now available in Symbol Watch.
IDE now asks for help resolving addresses if it needs it when breakpoints/markers are set on source lines that resolve to multiple
assembly statements.
Various robustness enhancements with regard to the usage of debug information available from CC65.

V1.008
Added "Symbols in RAM", "Symbols in SRAM", and "Symbols in EXRAM" tabs to Symbol Watch that shows what symbols are
in CPU address range 0x000-0x7FF, 0x6000-0x7FFF, and 0x5C00-0x5FFF respectively.  These tabs are not editable
-- the list of symbols is updated on a new compile.
Added symbol size information to Code Profiler and Symbol Watch.
Added file name to Symbol Watch and Code Profiler to show what file the symbol came from.
Added feature request from thefox where "source search paths" are captured and stored in the project file whenever the IDE
attempts to open a file it can't find in the project's folder or existing source search paths.  This is useful when trying to
look at or set breakpoints in library source code.  Currently the source search paths are captured by the IDE asking the user
to help it locate the source file it's trying to open...so it'll only ask once unless you're moving stuff around.  The source search
paths are stored relative to the .nesproject location.
Fixed breakpoint engine so breakpoints can again be set on execution of code in RAM, SRAM, and EXRAM.
Updated all example projects and made sure they build/run ok.
Added an example project based on Chris Covell's MMC5 EXRAM demo, rebuilt with CC65 that shows the
capability of the "Symbols in EXRAM" viewer.  (I moved some zeropage stuff to EXRAM).
Projects can now either:
a)Use Binary File and Graphics Banks objects to create a CHR-ROM (as in the russian_roulette example), or
b)Use Binary File and Graphics Banks objects to create a CHR-RAM file (that is .incbin'd as in Tepples-SNROM example), or
c)Not use either of the above if there's already a CHR format file that is just going to be .incbin'd for either CHR-RAM or CHR-ROM (as in the Alterego example).
Fixed Windows "Clean Project" so it uses cmd.exe del (just like the universal makefile now does)

V1.007
Added PNG file export capability to Graphics Banks.
Added initial stab at a Code Profiler that has limited information in it at the moment.
Added configurable C-language syntax highlighting using QScintilla's standard "C++ lexer".  Eventually I'll strip out the useless style tags.
Added mixed-mode debug capability in C-language source files.
Added source stepping capability in C-language source files.
Added step-over capability.
Step-return capability is planned but not working yet.

V1.006
Added PNG file import capability to Binary Files.  Both online examples updated to use the raw PNG files instead of pre-converted CHR.
Added mirroring setup display to Mapper Inspector.
Added more FME-7 display to Mapper Inspector.

V1.005
Fixed PPU state-change breakpoints so breakpoints can be set on when the PPU changes state internally (ie. not due to program flow).
Added OAM address/data information to PPU inspector.
Added scroll x/y information to PPU inspector.
Implemented frame step which steps an entire PPU frame.
Added CPU vectors to CPU register inspector.
Enhanced Code Editor syntax highlight and enabled configurable tab spacing, tab/space replacement, and auto-indent (thanks thefox!)
Implemented <ROM>.sav save-state files for saving emulator state.  Right now only the SRAM is restored on a ROM load.
Implemented full-screen mode (F11).
Added support for C files, and C compiler configuration options in Project Preferences.
Initial implementation of FME-7 mapper (69) for thefox.

V1.004
Added search bar hooks to Graphics Bank editor.
Changed auto-completion style of search bar combobox and Search combo boxes to popup instead of inline (nicer).
Added search-and-replace functionality, renamed Find-in-Files to Search since it encompases more than just "find in files" now.
Added support for Vaus Arkanoid controller.
Added function-key shortcuts and menu options for emulator control (play, pause, step cpu, step ppu, reset).
Fixed empty-path problem when creating a new project.

V1.003
Added persistence to options for search widget in toolbar.
Fixed source navigator toolbar widget so symbol selector works--opens file where symbol is found and goes to that line.
Added Ctrl+F hotkey for search toolbar activation, and Ctrl+Shift+F hotkey for Find-in-Files dialog activation.

V1.002
Added Find-in-Files dockable window.
Added current-file search widget to toolbar.
Fixed SVG icon problems--moved to PNG.
Project now accepts any file types and only passes .c or .s files to compiler.
Clicking on marker start/end cells in the Execution Visualizer will show that location in the Assemby Inspector or in the Code Editor if the appropriate source file is open.

V1.001
Fixed problem where non-ASCII keys used for controller configuration were not being mapped correctly.

V1.000
Initial release.
