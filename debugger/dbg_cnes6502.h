#if !defined ( NESCPU_H )
#define NESCPU_H

#include "ccodedatalogger.h"
#include "cregisterdata.h"
#include "cbreakpointinfo.h"

#include "emulator_core.h"

// Routines to retrieve the ToolTip information for a particular opcode.
const char* OPCODEINFO ( uint8_t op );
const char* OPCODEINFO ( const char* op );
const char* OPCODECHECK ( uint8_t idx, const char* op );

// Routine to retrieve the size of the specified opcode.
uint8_t OPCODESIZE ( uint8_t op );

// The C6502DBG class is a container for all debug elements
// relevant to the NES' 6502 CPU.
class C6502DBG
{
public:
   C6502DBG();
   virtual ~C6502DBG();

   // The CPU's Code/Data Logger display is generated by the CPU core
   // because the CPU core maintains all of the information necessary
   // to generate it.
   static inline void CodeDataLoggerInspectorTV ( int8_t* pTV )
   {
      m_pCodeDataLoggerInspectorTV = pTV;
   }
   static void RENDERCODEDATALOGGER ( void );

   // The Execution Visualizer display is generated by the CPU core
   // because the CPU core maintains all of the information necessary
   // to generate it.
   static inline void ExecutionVisualizerInspectorTV ( int8_t* pTV )
   {
      m_pExecutionVisualizerInspectorTV = pTV;
   }
   static void RENDEREXECUTIONVISUALIZER ( void );

protected:
   // The memory for the Code/Data Logger display.  It is allocated
   // by the debugger inspector and passed to the CPU core for use
   // during emulation.
   static int8_t*          m_pCodeDataLoggerInspectorTV;

   // The memory for the Execution Visualizer display.  It is allocated
   // by the debugger inspector and passed to the CPU core for use
   // during emulation.
   static int8_t*          m_pExecutionVisualizerInspectorTV;
};

// Structure representing each instruction and
// addressing mode possible within the CPU core.
typedef struct _C6502_opcode
{
   // Self-referential index.
   int32_t op;

   // Instruction printable name.
   const char* name;

   // Addressing mode of this particular entry.
   int32_t amode;

   // Number of CPU cycles required to execute this particular entry.
   int32_t cycles;

   // Is the instruction part of the documented 6502 ISA?
   bool documented;

   // Do we force an extra cycle for this instruction variant?
   bool forceExtraCycle;
} C6502_opcode;

#endif
